import { useState, useMemo } from "react";
import { Button } from "@/components/ui/button";
import Icon from "@/components/ui/icon";
import NoteCard from "@/components/NoteCard";
import SearchBar from "@/components/SearchBar";
import NoteEditor from "@/components/NoteEditor";
import StatsPanel from "@/components/StatsPanel";

interface Note {
  id: string;
  title: string;
  content: string;
  tags: string[];
  createdAt: Date;
  connections: string[];
}

const Index = () => {
  const [notes, setNotes] = useState<Note[]>([
    {
      id: "1",
      title: "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è Building a Second Brain",
      content:
        "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è–º–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –¢–∏–∞–≥–æ –§–æ—Ä—Ç–µ. –û—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö CODE: Capture, Organize, Distill, Express.",
      tags: ["–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–æ–±—É—á–µ–Ω–∏–µ", "—Å–∏—Å—Ç–µ–º–∞"],
      createdAt: new Date("2024-01-15"),
      connections: ["2"],
    },
    {
      id: "2",
      title: "–ü—Ä–∏–Ω—Ü–∏–ø Zettelkasten",
      content:
        "–ú–µ—Ç–æ–¥ –≤–µ–¥–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É –∏–¥–µ—é –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã.",
      tags: ["–∑–∞–º–µ—Ç–∫–∏", "—Å–∏—Å—Ç–µ–º–∞", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"],
      createdAt: new Date("2024-01-20"),
      connections: ["1", "3"],
    },
    {
      id: "3",
      title: "–≠—Ñ—Ñ–µ–∫—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è",
      content:
        "–ö–æ–≥–¥–∞ –∏–¥–µ–∏ —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π, –≤–æ–∑–Ω–∏–∫–∞—é—Ç –Ω–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –ß–µ–º –±–æ–ª—å—à–µ —Å–≤—è–∑–µ–π, —Ç–µ–º –±–æ–≥–∞—á–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.",
      tags: ["–º—ã—à–ª–µ–Ω–∏–µ", "—Å–≤—è–∑–∏", "–∏–Ω—Å–∞–π—Ç—ã"],
      createdAt: new Date("2024-01-25"),
      connections: ["2"],
    },
  ]);

  const [searchQuery, setSearchQuery] = useState("");
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [showEditor, setShowEditor] = useState(false);
  const [editingNote, setEditingNote] = useState<string | null>(null);

  // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏
  const availableTags = useMemo(() => {
    const allTags = notes.flatMap((note) => note.tags);
    return Array.from(new Set(allTags));
  }, [notes]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏
  const filteredNotes = useMemo(() => {
    return notes.filter((note) => {
      const matchesSearch =
        searchQuery === "" ||
        note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        note.content.toLowerCase().includes(searchQuery.toLowerCase());

      const matchesTags =
        selectedTags.length === 0 ||
        selectedTags.every((tag) => note.tags.includes(tag));

      return matchesSearch && matchesTags;
    });
  }, [notes, searchQuery, selectedTags]);

  const handleTagToggle = (tag: string) => {
    setSelectedTags((prev) =>
      prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag],
    );
  };

  const handleSaveNote = (noteData: {
    title: string;
    content: string;
    tags: string[];
  }) => {
    if (editingNote) {
      setNotes((prev) =>
        prev.map((note) =>
          note.id === editingNote ? { ...note, ...noteData } : note,
        ),
      );
      setEditingNote(null);
    } else {
      const newNote: Note = {
        id: Date.now().toString(),
        ...noteData,
        createdAt: new Date(),
        connections: [],
      };
      setNotes((prev) => [newNote, ...prev]);
    }
    setShowEditor(false);
  };

  const handleEditNote = (id: string) => {
    setEditingNote(id);
    setShowEditor(true);
  };

  const totalConnections = notes.reduce(
    (sum, note) => sum + note.connections.length,
    0,
  );
  const recentActivity = notes.filter((note) => {
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);
    return note.createdAt >= weekAgo;
  }).length;

  if (showEditor) {
    const noteToEdit = editingNote
      ? notes.find((n) => n.id === editingNote)
      : undefined;
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-4xl mx-auto">
          <NoteEditor
            onSave={handleSaveNote}
            onCancel={() => {
              setShowEditor(false);
              setEditingNote(null);
            }}
            initialNote={noteToEdit}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-6xl mx-auto p-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              üß† –í—Ç–æ—Ä–æ–π –º–æ–∑–≥
            </h1>
            <p className="text-gray-600">
              –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è–º–∏
            </p>
          </div>

          <Button
            onClick={() => setShowEditor(true)}
            className="bg-purple-600 hover:bg-purple-700"
          >
            <Icon name="Plus" size={20} className="mr-2" />
            –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞
          </Button>
        </div>

        {/* Stats */}
        <StatsPanel
          totalNotes={notes.length}
          totalTags={availableTags.length}
          totalConnections={totalConnections}
          recentActivity={recentActivity}
        />

        {/* Search and Filters */}
        <div className="mb-8">
          <SearchBar
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            selectedTags={selectedTags}
            availableTags={availableTags}
            onTagToggle={handleTagToggle}
            onClearFilters={() => {
              setSearchQuery("");
              setSelectedTags([]);
            }}
          />
        </div>

        {/* Notes Grid */}
        {filteredNotes.length === 0 ? (
          <div className="text-center py-12">
            <Icon
              name="FileText"
              size={48}
              className="mx-auto text-gray-400 mb-4"
            />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {searchQuery || selectedTags.length > 0
                ? "–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                : "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫"}
            </h3>
            <p className="text-gray-500 mb-4">
              {searchQuery || selectedTags.length > 0
                ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã"
                : "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –º–æ–∑–≥–∞"}
            </p>
            {!(searchQuery || selectedTags.length > 0) && (
              <Button
                onClick={() => setShowEditor(true)}
                className="bg-purple-600 hover:bg-purple-700"
              >
                <Icon name="Plus" size={16} className="mr-2" />
                –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É
              </Button>
            )}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredNotes.map((note) => (
              <NoteCard
                key={note.id}
                note={note}
                onEdit={handleEditNote}
                onConnect={(id) => console.log("Connect note:", id)}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default Index;
